from collections import OrderedDict

from django import forms
from django.core.exceptions import ValidationError
from django.utils.translation import gettext_lazy as _

from pretix.base.payment import BasePaymentProvider


def _is_valid_pix_key(pix_key):
    return True


class PixManual(BasePaymentProvider):
    identifier = "pix_manual"
    verbose_name = _("Brazilian Pix - Manual processing")

    @property
    def settings_form_fields(self):
        default_form_fields = list(super().settings_form_fields.items())
        custom_keys = [
            (
                "_pix_key",
                forms.CharField(
                    label=_("Pix key"),
                    help_text=_(
                        "Pix key that will be used to receive payments. "
                        "It can be an email address, phone number, CNPJ, "
                        "CPF, or a random key generated by your bank."
                    ),
                    required=True,
                ),
            )
        ]
        return OrderedDict(custom_keys + default_form_fields)

    def settings_form_clean(self, cleaned_data):
        pix_key = cleaned_data.get("payment_pix_manual__pix_key")
        if not _is_valid_pix_key(pix_key):
            raise ValidationError(
                {"payment_pix_manual__pix_key": _("Please provide a valid Pix key.")}
            )

        return cleaned_data

    def settings_content_render(self, request):
        return _(
            "This payment method will generate a Pix key with order information "
            "that your customer can use to make the payment. Payment confirmation, "
            "cancellations, and refunds must be done manually."
        )

    @property
    def test_mode_message(self):
        return _(
            "In test mode, you can just manually mark this order as paid in the backend "
            "after it has been created."
        )

    def payment_is_valid_session(self, request):
        return True

    def checkout_confirm_render(self, request, order=None, info_data=None):
        return "Review order info"

    def order_pending_mail_render(self, order, payment):
        return "Alguma coisa no email de confirmação"

    def payment_pending_render(self, request, payment):
        """
        Render customer-facing instructions on how to proceed with a pending payment

        :return: HTML
        """
        return "como vou pagar essa bodega"
